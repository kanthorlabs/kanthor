package api

import (
	"github.com/go-chi/chi/v5"
	"github.com/kanthorlabs/common/gateway/httpx"
	httpxmw "github.com/kanthorlabs/common/gateway/httpx/middleware"
	httpxwriter "github.com/kanthorlabs/common/gateway/httpx/writer"
	openapi "github.com/kanthorlabs/kanthor/openapi" // docs is generated by Swag CLI, you have to import it.
	swagger "github.com/swaggo/http-swagger/v2"
)

type Error httpxwriter.E // @name Error

func (service *portal) httpx() error {
	handler, err := httpx.New(&service.conf.Portal.Gateway, service.logger)
	if err != nil {
		return err
	}

	// healthz
	RegisterHealthzRoutes(handler, service)

	// openapi
	handler.Get("/openapi/*", swagger.Handler(
		swagger.PersistAuthorization(true),
		swagger.InstanceName(openapi.SwaggerInfoPortal.InstanceName()),
	))

	// protected routes
	handler.Route("/api", func(router chi.Router) {
		router.Use(httpxmw.Telemetry())
		router.Use(httpxmw.Idempotency(service.infra.Idempotency(), service.conf.Portal.Gateway.Idempotency.Disabled))
		router.Use(httpxmw.Authn(
			service.infra.Passport(),
			httpxmw.AuthnWithCache(service.infra.Cache()),
			httpxmw.AuthnWithFallback(service.conf.Portal.Authn.DefaultStrategy),
			// use default time to live - 1 hour
		))
		RegisterAccountRoutes(router, service)
		RegisterWorkspaceRoutes(router, service)
		RegisterCredentialsRoutes(router, service)
	})

	return service.server.UseHttpx(handler)
}
