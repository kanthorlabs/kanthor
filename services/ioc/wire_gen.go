// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/kanthorlabs/kanthor/configuration"
	"github.com/kanthorlabs/kanthor/database"
	"github.com/kanthorlabs/kanthor/datastore"
	"github.com/kanthorlabs/kanthor/infrastructure"
	"github.com/kanthorlabs/kanthor/logging"
	"github.com/kanthorlabs/kanthor/patterns"
	"github.com/kanthorlabs/kanthor/services/attempt/config"
	"github.com/kanthorlabs/kanthor/services/attempt/entrypoint"
	"github.com/kanthorlabs/kanthor/services/attempt/repositories"
	"github.com/kanthorlabs/kanthor/services/attempt/usecase"
	config2 "github.com/kanthorlabs/kanthor/services/dispatcher/config"
	entrypoint2 "github.com/kanthorlabs/kanthor/services/dispatcher/entrypoint"
	usecase2 "github.com/kanthorlabs/kanthor/services/dispatcher/usecase"
	config3 "github.com/kanthorlabs/kanthor/services/portal/config"
	entrypoint3 "github.com/kanthorlabs/kanthor/services/portal/entrypoint"
	repositories2 "github.com/kanthorlabs/kanthor/services/portal/repositories"
	usecase3 "github.com/kanthorlabs/kanthor/services/portal/usecase"
	config4 "github.com/kanthorlabs/kanthor/services/recovery/config"
	entrypoint4 "github.com/kanthorlabs/kanthor/services/recovery/entrypoint"
	repositories3 "github.com/kanthorlabs/kanthor/services/recovery/repositories"
	usecase4 "github.com/kanthorlabs/kanthor/services/recovery/usecase"
	config5 "github.com/kanthorlabs/kanthor/services/scheduler/config"
	entrypoint5 "github.com/kanthorlabs/kanthor/services/scheduler/entrypoint"
	repositories4 "github.com/kanthorlabs/kanthor/services/scheduler/repositories"
	usecase5 "github.com/kanthorlabs/kanthor/services/scheduler/usecase"
	config6 "github.com/kanthorlabs/kanthor/services/sdk/config"
	entrypoint6 "github.com/kanthorlabs/kanthor/services/sdk/entrypoint"
	repositories5 "github.com/kanthorlabs/kanthor/services/sdk/repositories"
	usecase6 "github.com/kanthorlabs/kanthor/services/sdk/usecase"
	config7 "github.com/kanthorlabs/kanthor/services/storage/config"
	entrypoint7 "github.com/kanthorlabs/kanthor/services/storage/entrypoint"
	repositories6 "github.com/kanthorlabs/kanthor/services/storage/repositories"
	usecase7 "github.com/kanthorlabs/kanthor/services/storage/usecase"
)

// Injectors from wire_attempt.go:

func AttemptCronjob(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	datastoreDatastore, err := datastore.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories.New(logger, databaseDatabase, datastoreDatastore)
	attempt := usecase.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint.Cronjob(configConfig, logger, infrastructureInfrastructure, databaseDatabase, datastoreDatastore, attempt)
	return runnable, nil
}

func AttemptConsumer(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	datastoreDatastore, err := datastore.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories.New(logger, databaseDatabase, datastoreDatastore)
	attempt := usecase.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint.Consumer(configConfig, logger, infrastructureInfrastructure, databaseDatabase, datastoreDatastore, attempt)
	return runnable, nil
}

func AttemptTrigger(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	datastoreDatastore, err := datastore.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories.New(logger, databaseDatabase, datastoreDatastore)
	attempt := usecase.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint.Trigger(configConfig, logger, infrastructureInfrastructure, databaseDatabase, datastoreDatastore, attempt)
	return runnable, nil
}

func AttemptSelector(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	datastoreDatastore, err := datastore.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories.New(logger, databaseDatabase, datastoreDatastore)
	attempt := usecase.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint.Selector(configConfig, logger, infrastructureInfrastructure, databaseDatabase, datastoreDatastore, attempt)
	return runnable, nil
}

func AttemptEndeavor(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	datastoreDatastore, err := datastore.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories.New(logger, databaseDatabase, datastoreDatastore)
	attempt := usecase.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint.Endeavor(configConfig, logger, infrastructureInfrastructure, databaseDatabase, datastoreDatastore, attempt)
	return runnable, nil
}

// Injectors from wire_dispatcher.go:

func Dispatcher(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config2.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	dispatcher := usecase2.New(configConfig, logger, infrastructureInfrastructure)
	runnable := entrypoint2.Consumer(configConfig, logger, infrastructureInfrastructure, dispatcher)
	return runnable, nil
}

// Injectors from wire_portal.go:

func Portal(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config3.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	datastoreDatastore, err := datastore.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories2.New(logger, databaseDatabase, datastoreDatastore)
	portal := usecase3.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint3.Rest(configConfig, logger, infrastructureInfrastructure, databaseDatabase, datastoreDatastore, portal)
	return runnable, nil
}

// Injectors from wire_recovery.go:

func RecoveryCronjob(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config4.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	datastoreDatastore, err := datastore.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories3.New(logger, databaseDatabase, datastoreDatastore)
	recovery := usecase4.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint4.Cronjob(configConfig, logger, infrastructureInfrastructure, databaseDatabase, datastoreDatastore, recovery)
	return runnable, nil
}

func RecoveryConsumer(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config4.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	datastoreDatastore, err := datastore.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories3.New(logger, databaseDatabase, datastoreDatastore)
	recovery := usecase4.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint4.Consumer(configConfig, logger, infrastructureInfrastructure, databaseDatabase, datastoreDatastore, recovery)
	return runnable, nil
}

// Injectors from wire_scheduler.go:

func Scheduler(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config5.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories4.New(logger, databaseDatabase)
	scheduler := usecase5.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint5.Consumer(configConfig, logger, infrastructureInfrastructure, databaseDatabase, scheduler)
	return runnable, nil
}

// Injectors from wire_sdk.go:

func Sdk(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config6.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories5.New(logger, databaseDatabase)
	sdk := usecase6.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint6.Rest(configConfig, logger, infrastructureInfrastructure, databaseDatabase, sdk)
	return runnable, nil
}

// Injectors from wire_storage.go:

func Storage(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config7.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	infrastructureInfrastructure, err := infrastructure.New(provider)
	if err != nil {
		return nil, err
	}
	datastoreDatastore, err := datastore.New(provider)
	if err != nil {
		return nil, err
	}
	repositoriesRepositories := repositories6.New(logger, datastoreDatastore)
	storage := usecase7.New(configConfig, logger, infrastructureInfrastructure, repositoriesRepositories)
	runnable := entrypoint7.Consumer(configConfig, logger, infrastructureInfrastructure, datastoreDatastore, storage)
	return runnable, nil
}
