// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/kanthorlabs/common/clock"
	"github.com/kanthorlabs/common/configuration"
	"github.com/kanthorlabs/common/logging"
	"github.com/kanthorlabs/common/patterns"
	"github.com/kanthorlabs/kanthor/infrastructure"
	"github.com/kanthorlabs/kanthor/services/delivery/config"
	"github.com/kanthorlabs/kanthor/services/delivery/entrypoint"
	"github.com/kanthorlabs/kanthor/services/delivery/usecase"
	config2 "github.com/kanthorlabs/kanthor/services/portal/config"
	entrypoint2 "github.com/kanthorlabs/kanthor/services/portal/entrypoint"
	usecase2 "github.com/kanthorlabs/kanthor/services/portal/usecase"
	config3 "github.com/kanthorlabs/kanthor/services/sdk/config"
	entrypoint3 "github.com/kanthorlabs/kanthor/services/sdk/entrypoint"
	usecase3 "github.com/kanthorlabs/kanthor/services/sdk/usecase"
	config4 "github.com/kanthorlabs/kanthor/services/storage/config"
	entrypoint4 "github.com/kanthorlabs/kanthor/services/storage/entrypoint"
	usecase4 "github.com/kanthorlabs/kanthor/services/storage/usecase"
)

// Injectors from delivery.go:

func Scheduler(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	config2 := &configConfig.Infrastructure
	infrastructureInfrastructure, err := infrastructure.New(config2, logger)
	if err != nil {
		return nil, err
	}
	clockClock := clock.New()
	delivery, err := usecase.New(configConfig, logger, infrastructureInfrastructure, clockClock)
	if err != nil {
		return nil, err
	}
	runnable, err := entrypoint.NewScheduler(configConfig, logger, infrastructureInfrastructure, delivery)
	if err != nil {
		return nil, err
	}
	return runnable, nil
}

// Injectors from portal.go:

func Portal(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config2.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	config3 := &configConfig.Infrastructure
	infrastructureInfrastructure, err := infrastructure.New(config3, logger)
	if err != nil {
		return nil, err
	}
	clockClock := clock.New()
	portal, err := usecase2.New(configConfig, logger, infrastructureInfrastructure, clockClock)
	if err != nil {
		return nil, err
	}
	runnable, err := entrypoint2.NewApi(configConfig, logger, infrastructureInfrastructure, portal)
	if err != nil {
		return nil, err
	}
	return runnable, nil
}

// Injectors from sdk.go:

func Sdk(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config3.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	config4 := &configConfig.Infrastructure
	infrastructureInfrastructure, err := infrastructure.New(config4, logger)
	if err != nil {
		return nil, err
	}
	clockClock := clock.New()
	sdk, err := usecase3.New(configConfig, logger, infrastructureInfrastructure, clockClock)
	if err != nil {
		return nil, err
	}
	runnable, err := entrypoint3.NewApi(configConfig, logger, infrastructureInfrastructure, sdk)
	if err != nil {
		return nil, err
	}
	return runnable, nil
}

// Injectors from storage.go:

func Storage(provider configuration.Provider) (patterns.Runnable, error) {
	configConfig, err := config4.New(provider)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(provider)
	if err != nil {
		return nil, err
	}
	config5 := &configConfig.Infrastructure
	infrastructureInfrastructure, err := infrastructure.New(config5, logger)
	if err != nil {
		return nil, err
	}
	clockClock := clock.New()
	storage, err := usecase4.New(configConfig, logger, infrastructureInfrastructure, clockClock)
	if err != nil {
		return nil, err
	}
	runnable, err := entrypoint4.NewConsumer(configConfig, logger, infrastructureInfrastructure, storage)
	if err != nil {
		return nil, err
	}
	return runnable, nil
}
